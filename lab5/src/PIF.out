let on symbol table: (-1;-1)
func on symbol table: (-1;-1)
id on symbol table: (9;0)
( on symbol table: (-1;-1)
integer on symbol table: (-1;-1)
id on symbol table: (9;1)
) on symbol table: (-1;-1)
returns on symbol table: (-1;-1)
integer on symbol table: (-1;-1)
{ on symbol table: (-1;-1)
print on symbol table: (-1;-1)
cst on symbol table: (2;0)
; on symbol table: (-1;-1)
print on symbol table: (-1;-1)
id on symbol table: (9;1)
; on symbol table: (-1;-1)
let on symbol table: (-1;-1)
integer on symbol table: (-1;-1)
id on symbol table: (2;1)
; on symbol table: (-1;-1)
scan on symbol table: (-1;-1)
integer on symbol table: (-1;-1)
id on symbol table: (2;1)
; on symbol table: (-1;-1)
id on symbol table: (2;1)
= on symbol table: (-1;-1)
cst on symbol table: (8;0)
; on symbol table: (-1;-1)
if on symbol table: (-1;-1)
( on symbol table: (-1;-1)
id on symbol table: (2;1)
> on symbol table: (-1;-1)
cst on symbol table: (3;0)
) on symbol table: (-1;-1)
then on symbol table: (-1;-1)
{ on symbol table: (-1;-1)
print on symbol table: (-1;-1)
id on symbol table: (9;1)
; on symbol table: (-1;-1)
} on symbol table: (-1;-1)
else on symbol table: (-1;-1)
{ on symbol table: (-1;-1)
print on symbol table: (-1;-1)
id on symbol table: (2;1)
; on symbol table: (-1;-1)
} on symbol table: (-1;-1)
while on symbol table: (-1;-1)
( on symbol table: (-1;-1)
id on symbol table: (2;1)
< on symbol table: (-1;-1)
cst on symbol table: (3;1)
) on symbol table: (-1;-1)
then on symbol table: (-1;-1)
{ on symbol table: (-1;-1)
print on symbol table: (-1;-1)
id on symbol table: (2;1)
; on symbol table: (-1;-1)
id on symbol table: (2;1)
= on symbol table: (-1;-1)
id on symbol table: (2;1)
+ on symbol table: (-1;-1)
cst on symbol table: (1;0)
; on symbol table: (-1;-1)
} on symbol table: (-1;-1)
} on symbol table: (-1;-1)
; on symbol table: (-1;-1)